#include "imports/stdlib.fc";

(slice) parse_sender_address (cell in_msg_full) inline {
    var ds = in_msg_full.begin_parse();
    var flags = ds~load_uint(4);
    slice sender_address = ds~load_msg_addr();
    return sender_address;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() == 0) {
        return ();
    }
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    slice local_storage = get_data().begin_parse();
    if (local_storage.slice_bits() == 0) {
        if (op == 1) {
            cell dict = new_dict();
            slice next_contract_addr = in_msg_body~load_msg_addr();
            slice rep_contract_addr = in_msg_body~load_msg_addr();
            dict = dict.udict_set(256, 0, begin_cell().store_slice(next_contract_addr).store_slice(rep_contract_addr).end_cell().begin_parse());
            set_data(begin_cell().store_dict(dict).end_cell());
        } else {
            throw(104);
        }
    } else {
        cell dict = local_storage~load_dict();
        (slice data, int success) = dict.udict_get?(256, 0);
        throw_unless(108, success == -1);
        slice next_contract = data~load_msg_addr();
        slice rep_contract = data~load_msg_addr();
        slice sender = parse_sender_address(in_msg_full);

        if (op == 2) {
            int idx = sender~load_uint(256);
            (slice data, int success) = dict.udict_get?(256, idx);
            int amount = 100000000000;
            if (success == -1) {
                int rep = data~load_uint(32);
                amount = amount + rep * 50000000000;
            }
            int target = in_msg_body~load_uint(256);
            throw_if(106, target > amount);

            cell msg_body_ref = begin_cell()
                .store_uint(1, 32)
                .store_uint(query_id, 64)
                .store_uint(target, 256)
                .store_slice(sender)
                .store_slice(in_msg_body)
                .end_cell();

            var msg = begin_cell()
                .store_uint(0x10, 6)
                .store_slice(next_contract)
                .store_grams(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_slice(my_address())
                .store_ref(msg_body_ref)
                .end_cell();
            send_raw_message(msg, 64);
        } elseif (op == 3) {
            throw_if(105, ~ equal_slices_bits(rep_contract, sender));
            slice fulfiller = in_msg_body~load_msg_addr();
            int idx = fulfiller~load_uint(256);
            (slice val, int key) = dict.udict_get?(256, idx);
            int rep = 1;
            if (key == -1) {
                int rep_old = val~load_uint(32);
                rep = rep + rep_old;
            }
            dict = dict.udict_set(256,idx,begin_cell().store_uint(rep, 32).end_cell().begin_parse());
            set_data(begin_cell().store_dict(dict).end_cell());
        } else {
            throw(103);
        }
    }
}

int get_rep(slice address) method_id {
    slice ds = get_data().begin_parse();
    throw_if(107, ds.slice_bits() == 0);
    cell dict = ds~load_dict();
    int key = address~load_uint(256);
    (slice payload, int success) = dict.udict_get?(256, key);
    if (success == -1) {
        int rep = payload~load_uint(32);
        return rep;
    }
    return 0;

}