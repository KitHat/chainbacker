#include "imports/stdlib.fc";

cell pack_kick_data(int expiration, int target, slice creator) inline {
    return begin_cell()
        .store_uint(expiration, 64)     ;; last voted
        .store_uint(target, 64)         ;; voting_power
        .store_slice(creator)           ;; creator address
        .end_cell();
}

slice calculate_kick_state_init(int expiration, int target, slice creator) inline {
    return begin_cell()
        .store_uint(0, 2) ;; TODO: learn what TickTock and split_depth is
        .store_dict(backer_code)
        .store_dict(pack_backer_data(owner))
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_backer_address(slice state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(workchain(), 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

slice calculate_user_backer_address(slice owner, cell backer_code) inline {
    return calculate_backer_address(calculate_backer_state_init(owner,backer_code));
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; single op -- create a kick
}

