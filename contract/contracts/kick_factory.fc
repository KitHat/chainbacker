#include "imports/stdlib.fc";

{-
    Errors:
    301: milestones not set
    302: tiers not set
    303: milestones sum not equal to 100
    304: expiration date is in the past
-}

int workchain() asm "0 PUSHINT";

(cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_ref(), ;; kick code,
        ds~load_ref()  ;; back code
    );
}

cell pack_kick_data(int target, int expiration, int tier_number, slice creator, cell milestones, cell tiers, cell backer_code) inline {
    return begin_cell()
        .store_uint(0, 64)                  ;; collected
        .store_uint(target, 64)             ;; target
        .store_uint(expiration, 64)         ;; expiration date
        .store_uint(0, 64)                  ;; voted
        .store_uint(0, 64)                  ;; distributed
        .store_uint(0, 1)                   ;; vote in progress
        .store_uint(0, 8)                   ;; vote number
        .store_uint(tier_number, 8)         ;; tier number
        .store_slice(creator)               ;; kick creator
        .store_ref(milestones)              ;; milestones
        .store_ref(tiers)                   ;; tiers
        .store_ref(backer_code)             ;; backer contract code
        .store_ref(begin_cell().end_cell()) ;; usdt wallet, will be set later by creator
        .end_cell();
}

cell calculate_kick_state_init(int target, int expiration, int tier_number, slice creator, cell milestones, cell tiers, cell backer_code, cell kick_code) inline {
    return begin_cell()
        .store_uint(0, 2) ;; TODO: learn what TickTock and split_depth is
        .store_dict(kick_code)
        .store_dict(pack_kick_data(target, expiration, tier_number, creator, milestones, tiers, backer_code))
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_kick_address(cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(workchain(), 8)
        .store_uint(state_init.cell_hash(), 256)
        .end_cell()
        .begin_parse();
}

slice calculate_user_kick_address(int target, int expiration, int tier_number, slice creator, cell milestones, cell tiers, cell backer_code, cell kick_code) inline {
    return calculate_kick_address(calculate_kick_state_init(target, expiration, tier_number, creator, milestones, tiers, backer_code, kick_code));
}

slice parse_sender_address (cell in_msg_full) inline {
    var ds = in_msg_full.begin_parse();
    var flags = ds~load_uint(4);
    slice sender_address = ds~load_msg_addr();
    return sender_address;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice creator = parse_sender_address(in_msg_full);
    int query_id = in_msg_body~load_uint(64);

    int target = in_msg_body~load_uint(64);
    int expiration = in_msg_body~load_uint(64);
    int tier_number = in_msg_body~load_uint(8);
    
    throw_if(301, in_msg_body.slice_refs_empty?() == -1);
    cell milestones = in_msg_body~load_ref();

    throw_if(302, in_msg_body.slice_refs_empty?() == -1);
    cell tiers = in_msg_body~load_ref();

    int part_sum = 0;

    slice milestones_data = milestones.begin_parse();

    while (milestones_data.slice_bits() != 0) {
        int next_part = milestones_data~load_uint(8);
        part_sum = part_sum + next_part;
    }

    (cell kick_code, cell backer_code) = load_data();

    throw_if(303, part_sum != 100);
    throw_if(304, expiration < now());

    var state_init = calculate_kick_state_init(target,expiration,tier_number,creator,milestones,tiers,backer_code,kick_code);
    slice kick_wallet_address = calculate_kick_address(state_init);

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(kick_wallet_address)
        .store_coins(0)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(begin_cell().end_cell())
        .end_cell();

    send_raw_message(msg,64);
}

slice get_kick_address(int target, int expiration, int tier_number, slice creator, cell milestones, cell tiers) method_id {
    (cell kick_code, cell backer_code) = load_data();
    return calculate_user_kick_address(target,expiration,tier_number,creator,milestones,tiers,backer_code,kick_code);
}