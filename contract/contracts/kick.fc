#include "imports/stdlib.fc";
{-
    Errors:
        201: received backed not from kick's usdt jetton wallet
        202: expiration has not happened while calling resolve for contract
        203: tried to buy more than were available
        204: paid less than it costs
        205: unauthorized vote start
        206: tried to start a vote when it is already in progress 
        207: unauthorized vote
        208: tried to buy after the expiration date
        209: voting when no vote in progress
        210: unauthorized refund
        211: refund requested before expiration time
        212: refund requested when kick is collected
        213: trying to distribute uncollected kick
        214: trying to start vote when kick is not collected
        215: USDT address not set
        216: trying to set USDT from non creator address
-}
int op::transfer_notification() asm "0x7362d09c PUSHINT";
int op::transfer() asm "0xf8a7ea5 PUSHINT";
int workchain() asm "0 PUSHINT";
int transfer_fee() asm "40000000 PUSHINT"; ;; 0.01 TON

(int, int, int, int, int, int, int, slice, slice, cell, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    cell milestones = ds~load_ref();
    cell tiers = ds~load_ref();
    cell wallet_code = ds~load_ref();
    throw_if(215, ds.slice_refs_empty?() == -1);
    slice usdt_wallet_cell = ds~load_ref().begin_parse();
    slice usdt_wallet = usdt_wallet_cell~load_msg_addr();
    return (
        ds~load_uint(64),  ;; collected
        ds~load_uint(64),  ;; target
        ds~load_uint(64),  ;; expiration
        ds~load_uint(64),  ;; voted
        ds~load_uint(64),  ;; distributed
        ds~load_uint(1),   ;; vote in progress
        ds~load_uint(8),   ;; current vote number
        ds~load_msg_addr(), ;; creator addr
        usdt_wallet, ;; usdt wallet addr
        milestones,
        tiers,
        wallet_code
    );
}

() save_data(
    int collected, 
    int target, 
    int expiration, 
    int voted, 
    int distributed,
    int vote_in_progress,
    int current_vote,
    slice creator,
    slice usdt_wallet,
    cell milestones, 
    cell tiers, 
    cell wallet_code
) impure inline {
    set_data(
        begin_cell()
            .store_uint(collected, 64)
            .store_uint(target, 64)
            .store_uint(expiration, 64)
            .store_uint(voted, 64)
            .store_uint(distributed, 64)
            .store_uint(vote_in_progress, 1)
            .store_uint(current_vote, 8)
            .store_slice(creator)
            .store_ref(milestones)
            .store_ref(tiers)
            .store_ref(wallet_code)
            .store_ref(begin_cell().store_slice(usdt_wallet).end_cell())
        .end_cell()
    );
}

slice parse_sender_address (cell in_msg_full) inline {
    var ds = in_msg_full.begin_parse();
    var flags = ds~load_uint(4);
    slice sender_address = ds~load_msg_addr();
    return sender_address;
}

cell pack_backer_data(slice owner) inline {
    return begin_cell()
        .store_uint(0, 8)          ;; last voted
        .store_uint(0, 64)         ;; voting_power
        .store_slice(my_address()) ;; kick address
        .store_slice(owner)        ;; owner address
        .store_ref(begin_cell().end_cell())
        .end_cell();
}

cell calculate_backer_state_init(slice owner, cell backer_code) inline {
    return begin_cell()
        .store_uint(0, 2) ;; TODO: learn what TickTock and split_depth is
        .store_dict(backer_code)
        .store_dict(pack_backer_data(owner))
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_backer_address(cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(workchain(), 8)
        .store_uint(state_init.cell_hash(), 256)
        .end_cell()
        .begin_parse();
}

slice calculate_user_backer_address(slice owner, cell backer_code) inline {
    return calculate_backer_address(calculate_backer_state_init(owner,backer_code));
}

(int, int, int) load_level (slice store) inline {
    return (
        store~load_uint(16), ;; limit
        store~load_uint(16), ;; bought
        store~load_uint(64)  ;; price
    );
}

cell update_limits(cell tiers, int level_id, int amount, int received) inline {
    slice ds = tiers.begin_parse();
    var res = begin_cell();
    repeat (level_id - 1) {
        (int limit, int bought, int price) = load_level(ds);
        res = res.store_uint(limit, 16)
        .store_uint(bought, 16)
        .store_uint(price, 64);
    }
    (int limit, int bought, int price) = load_level(ds);
    throw_if(203, bought + amount > limit);
    throw_if(204, price * amount > received);
    bought = bought + amount;
    return res
        .store_uint(limit, 16)
        .store_uint(bought, 16)
        .store_uint(price, 64)
        .end_cell();
}

(cell, int) next_milestone(cell milestones, int collected) inline {
    slice ds = milestones.begin_parse();
    int part = ds~load_uint(8);
    int next = muldiv(collected, part, 100);
    return (
        begin_cell().store_slice(ds).end_cell(),
        next
    );
}

() send_usdt(slice receiver, int amount, slice wallet, int query_id) impure inline {
    cell msg_body = begin_cell()
        .store_uint(op::transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(amount)
        .store_slice(receiver)
        .store_slice(my_address())
        .store_uint(0, 1)
        .store_coins(0)
        .store_uint(0, 1)
        .end_cell();

    cell msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(wallet)
        .store_coins(transfer_fee())
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body)
        .end_cell();
    send_raw_message(msg,66);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() == 0) {
        return ();
    }
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    slice sender = parse_sender_address(in_msg_full);

    if (op == 6) {
        slice ds = get_data().begin_parse();
        int collected = ds~load_uint(64);
        int target = ds~load_uint(64);
        int expiration = ds~load_uint(64);
        int voted = ds~load_uint(64);
        int distributed = ds~load_uint(64);
        int vote_in_progress = ds~load_uint(1);
        int current_vote = ds~load_uint(8);
        slice creator = ds~load_msg_addr();
        cell milestones = ds~load_ref();
        cell tiers = ds~load_ref();
        cell wallet_code = ds~load_ref();
        throw_if(216, ~ equal_slices_bits(sender, creator));
        slice usdt_wallet = in_msg_body~load_msg_addr();
        
        save_data(collected,target,expiration,voted,distributed,vote_in_progress,current_vote,creator,usdt_wallet,milestones,tiers,wallet_code);

        return ();
    } 

    (
        int collected, 
        int target, 
        int expiration, 
        int voted, 
        int distributed,
        int vote_in_progress,
        int current_vote, 
        slice creator,
        slice usdt_wallet,
        cell milestones, 
        cell tiers, 
        cell backer_code
    ) = load_data();

    if (op == op::transfer_notification()) {
        ;; back a kick
        throw_if(201, ~ equal_slices_bits(sender, usdt_wallet));
        throw_if(208, expiration < now());

        int received = in_msg_body~load_coins();
        slice backer_address = in_msg_body~load_msg_addr();
        int level_id = in_msg_body~load_uint(8);
        int amount = in_msg_body~load_uint(16);

        ;; mint message
        var msg_body = begin_cell()
            .store_uint(1, 32)
            .store_uint(query_id, 64)
            .store_uint(level_id, 8)
            .store_uint(amount, 16)
            .store_uint(received, 64)
            .end_cell();

        var state_init = calculate_backer_state_init(backer_address,backer_code);
        slice backer_wallet_address = calculate_backer_address(state_init);

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(backer_wallet_address)
            .store_coins(0)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(msg_body)
            .end_cell();
        
        send_raw_message(msg,64);

        collected = collected + received;
        tiers = update_limits(tiers,level_id,amount,received);
    } elseif (op == 1) {
        ;; resolve a kick
        throw_if(202, expiration > now());
        throw_if(213, target > collected);
        (milestones, int next) = next_milestone(milestones,collected);

        send_usdt(creator, next, usdt_wallet, query_id);

        distributed = next;
    } elseif (op == 2) {
        ;; start voting
        throw_if(205, ~ equal_slices_bits(sender, creator));
        throw_if(206, vote_in_progress == 1);
        throw_if(214, collected < target);
        
        vote_in_progress = 1;
        current_vote = current_vote + 1;
        voted = 0;
    } elseif (op == 3) {
        ;; receive vote
        throw_if(209, vote_in_progress == 0);
        slice voter = in_msg_body~load_msg_addr();
        int power = in_msg_body~load_uint(64);
        slice backer = calculate_user_backer_address(voter,backer_code);
        throw_if(207, ~ equal_slices_bits(backer, sender));

        voted = voted + power;

        if (10 * voted > collected * 8) { ;; more than 80% voted
            (milestones, int next) = next_milestone(milestones,collected);
            send_usdt(creator, next, usdt_wallet, query_id);
            distributed = distributed + next;
            vote_in_progress = 0;
        }
    } elseif (op == 4) {
        ;; process a refund
        throw_if(211, expiration > now());
        throw_if(212, collected > target);
        slice caller = in_msg_body~load_msg_addr();
        int refund = in_msg_body~load_uint(64);
        slice backer = calculate_user_backer_address(caller,backer_code);
        throw_if(210, ~ equal_slices_bits(backer,sender));
        send_usdt(caller, refund, usdt_wallet, query_id);
    } elseif (op == 5) {
        ;; TODO: resolve a kick refund if failed to deliver
    }

    save_data(collected,target,expiration,voted,distributed,vote_in_progress,current_vote,creator,usdt_wallet,milestones,tiers,backer_code);
}

(int, int) get_collect_state() method_id {
    (
        int collected, 
        int target, 
        int expiration, 
        int voted, 
        int distributed,
        int vote_in_progress,
        int current_vote,
        slice creator,
        slice usdt_wallet,
        cell milestones, 
        cell tiers, 
        cell wallet_code
    ) = load_data();
    return (collected, target);
}

(int, int, int, int) get_vote_state() method_id {
    (
        int collected, 
        int target, 
        int expiration, 
        int voted, 
        int distributed,
        int vote_in_progress,
        int current_vote,
        slice creator,
        slice usdt_wallet,
        cell milestones, 
        cell tiers, 
        cell wallet_code
    ) = load_data();
    return (vote_in_progress, current_vote, voted, target);
}

int get_expiration() method_id {
    (
        int collected, 
        int target, 
        int expiration, 
        int voted, 
        int distributed,
        int vote_in_progress,
        int current_vote,
        slice creator,
        slice usdt_wallet,
        cell milestones, 
        cell tiers, 
        cell wallet_code
    ) = load_data();
    return expiration;
}

slice get_creator() method_id {
    (
        int collected, 
        int target, 
        int expiration, 
        int voted, 
        int distributed,
        int vote_in_progress,
        int current_vote,
        slice creator,
        slice usdt_wallet,
        cell milestones, 
        cell tiers, 
        cell wallet_code
    ) = load_data();
    return creator;
}


slice get_backer_contract(slice backer_address) method_id {
    (
        int collected, 
        int target, 
        int expiration, 
        int voted, 
        int distributed,
        int vote_in_progress,
        int current_vote,
        slice creator,
        slice usdt_wallet,
        cell milestones, 
        cell tiers, 
        cell wallet_code
    ) = load_data();
    return calculate_user_backer_address(backer_address,wallet_code);
}

slice get_tier_data() method_id {
    (
        int collected, 
        int target, 
        int expiration, 
        int voted, 
        int distributed,
        int vote_in_progress,
        int current_vote,
        slice creator,
        slice usdt_wallet,
        cell milestones, 
        cell tiers, 
        cell wallet_code
    ) = load_data();
    return tiers.begin_parse();
}