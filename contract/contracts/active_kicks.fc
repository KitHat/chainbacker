#include "imports/stdlib.fc";

(slice) parse_sender_address (cell in_msg_full) inline {
    var ds = in_msg_full.begin_parse();
    var flags = ds~load_uint(4);
    slice sender_address = ds~load_msg_addr();
    return sender_address;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() == 0) {
        return ();
    }
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    slice local_storage = get_data().begin_parse();

    if (local_storage.slice_bits() == 0) {
        if (op == 1) {
            ;; init
        }
    } else {
        cell dict = local_storage~load_dict();
        if (op == 2) {
            ;; data struct for a gig 
            ;; <goal_uint256><collected_uint256><creator_addr><enddate_uint64><level_number_uint8>[<level_price_uint256><level_limit_uint16><level_limit_bought_uint16>]*
            builder kick_builder = begin_cell();
            int target = in_msg_body~load_uint(256);
            kick_builder = kick_builder.store_uint(target, 256).store_uint(0, 256);
            int creator = in_msg_body~load_msg_addr();
            kick_builder = kick_builder.store_slice(creator);
            int key = in_msg_body.load_uint(256);
            int valid_until = in_msg_body~load_uint(64);
            throw_if(111, valid_until < now());
            kick_builder = kick_builder.store_uint(valid_until, 256);
            int level_number = in_msg_body~load_uint(8);
            throw_unless(112, level_number > 0);
            kick_builder = kick_builder.store_uint(level_number, 8);
            repeat (level_number) {
                int level_price = in_msg_body~load_uint(256);
                int level_limit = in_msg_body~load_uint(16);
                kick_builder = kick_builder.store_uint(level_price, 256).store_uint(level_limit, 16).store_uint(0, 16);
            }
            cell kick = kick_builder.end_cell();
            dict = dict~udict_set(256, key, kick.begin_parse());
            set_data(dict);
        } elseif (op == 3) {
            ;; back a kick

        } elseif (op == 4) {
            ;; resolve kicks
        }
    }
}
